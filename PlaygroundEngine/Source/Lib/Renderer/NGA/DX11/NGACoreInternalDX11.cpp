#include "NGACoreInternalDX11.h"

#if CORE_RENDER_API(DX11)

#include <map>

#include "Core/Util/Util.h"

namespace playground
{
	NGAInternalStateDX11 NgaDx11State;

	DXGI_FORMAT NGAFormatToDXGI(NGAFormat format)
	{
		static constexpr DXGI_FORMAT CONV[] = {
			// Color formats
			DXGI_FORMAT_R32_FLOAT,
			DXGI_FORMAT_R32G32_FLOAT,
			DXGI_FORMAT_R32G32B32_FLOAT,
			DXGI_FORMAT_R32G32B32A32_FLOAT,

			DXGI_FORMAT_R16_FLOAT,
			DXGI_FORMAT_R16G16_FLOAT,
			DXGI_FORMAT_R16G16B16A16_FLOAT,

			DXGI_FORMAT_BC1_UNORM,
			DXGI_FORMAT_B8G8R8A8_UNORM,

			// Depth formats
			DXGI_FORMAT_D16_UNORM,
			DXGI_FORMAT_D24_UNORM_S8_UINT,
			DXGI_FORMAT_D32_FLOAT,

			// Typeless formats
			DXGI_FORMAT_R24G8_TYPELESS,
			DXGI_FORMAT_R32_TYPELESS,
			DXGI_FORMAT_R32G32_TYPELESS,
			DXGI_FORMAT_R32G32B32_TYPELESS,
			DXGI_FORMAT_R32G32B32A32_TYPELESS,

			DXGI_FORMAT_UNKNOWN
		};

		static_assert(STATIC_ARRAY_SIZE(CONV) == (int)NGAFormat::SIZE);

		return CONV[(int)format];
	}

	DXGI_FORMAT NGATypelessFormatToColorDXGI(NGAFormat format)
	{
		static std::map<NGAFormat, DXGI_FORMAT> CONV = {
			{ NGAFormat::R24G8_TYPELESS, DXGI_FORMAT_R24_UNORM_X8_TYPELESS, },
			{ NGAFormat::R32_TYPELESS, DXGI_FORMAT_R32_FLOAT },
			{ NGAFormat::R32G32_TYPELESS, DXGI_FORMAT_R32G32_FLOAT },
			{ NGAFormat::R32G32B32_TYPELESS, DXGI_FORMAT_R32G32B32_FLOAT },
			{ NGAFormat::R32G32B32A32_TYPELESS, DXGI_FORMAT_R32G32B32A32_FLOAT },
		};

		return CONV[format];
	}

	DXGI_FORMAT NGATypelessFormatToDepthDXGI(NGAFormat format)
	{
		static std::map<NGAFormat, DXGI_FORMAT> CONV = {
			{ NGAFormat::R24G8_TYPELESS, DXGI_FORMAT_D24_UNORM_S8_UINT, },
			{ NGAFormat::R32_TYPELESS, DXGI_FORMAT_D32_FLOAT }
		};

		return CONV[format];
	}

	D3D11_USAGE NGAUsageToD3D11(NGAUsage usage)
	{
		static constexpr D3D11_USAGE CONV[] = {
			D3D11_USAGE_IMMUTABLE,
			D3D11_USAGE_DEFAULT,
			D3D11_USAGE_DYNAMIC,
			D3D11_USAGE_STAGING
		};

		return CONV[(int)usage];
	}

	NGAFormat DXGIFormatToNGA(DXGI_FORMAT format)
	{
		static std::map<DXGI_FORMAT, NGAFormat> CONV = {
			{ DXGI_FORMAT_R32_FLOAT, NGAFormat::R32_FLOAT },
			{ DXGI_FORMAT_R32G32_FLOAT, NGAFormat::R32G32_FLOAT },
			{ DXGI_FORMAT_R32G32B32_FLOAT, NGAFormat::R32G32B32_FLOAT },
			{ DXGI_FORMAT_R32G32B32A32_FLOAT, NGAFormat::R32G32B32A32_FLOAT },

			{ DXGI_FORMAT_R16_FLOAT, NGAFormat::R16_FLOAT },
			{ DXGI_FORMAT_R16G16_FLOAT, NGAFormat::R16G16_FLOAT },
			{ DXGI_FORMAT_R16G16B16A16_FLOAT, NGAFormat::R16G16B16A16_FLOAT },

			{ DXGI_FORMAT_BC1_UNORM, NGAFormat::BC1_UNORM },
			{ DXGI_FORMAT_B8G8R8A8_UNORM, NGAFormat::B8G8R8A8_UNORM },

			{ DXGI_FORMAT_D16_UNORM, NGAFormat::D16_UNORM },
			{ DXGI_FORMAT_D24_UNORM_S8_UINT, NGAFormat::D24_UNORM_S8_UINT },
			{ DXGI_FORMAT_D32_FLOAT, NGAFormat::D32_FLOAT },

			{ DXGI_FORMAT_R24G8_TYPELESS, NGAFormat::R24G8_TYPELESS },
			{ DXGI_FORMAT_R32_TYPELESS, NGAFormat::R32_TYPELESS },
			{ DXGI_FORMAT_R32G32_TYPELESS, NGAFormat::R32G32_TYPELESS },
			{ DXGI_FORMAT_R32G32B32_TYPELESS, NGAFormat::R32G32B32_TYPELESS },
			{ DXGI_FORMAT_R32G32B32A32_TYPELESS, NGAFormat::R32G32B32A32_TYPELESS },

			{ DXGI_FORMAT_UNKNOWN, NGAFormat::UNKNOWN },
		};

		CORE_ASSERT_RETURN_VALUE(CONV.find(format) != CONV.end(), NGAFormat::UNKNOWN, "Unknown DXGI format.");

		return CONV[format];
	}
}

#endif //d efined(NGA_D3D11)